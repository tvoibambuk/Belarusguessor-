// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let gameState = {
    currentRound: 1,
    totalRounds: 5,
    score: 0,
    roundResults: [],
    currentLocation: null,
    usedLocations: [],
    guessMarker: null,
    correctMarker: null,
    gameMap: null,
    panoramaPlayer: null
};

let gameCoords = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    loadGameData();
    loadStats();
    initializeYandexMaps();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
async function loadGameData() {
    try {
        const response = await fetch('coords.json');
        gameCoords = await response.json();
        console.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', gameCoords.length);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
        // Fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        gameCoords = [
            { name: "–ú–∏–Ω—Å–∫, –ü—Ä–æ—Å–ø–µ–∫—Ç –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", lat: 53.9045, lng: 27.5615, region: "–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å" },
            { name: "–ì—Ä–æ–¥–Ω–æ, –°—Ç–∞—Ä—ã–π –≥–æ—Ä–æ–¥", lat: 53.6884, lng: 23.8258, region: "–ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å" },
            { name: "–ë—Ä–µ—Å—Ç, –¶–µ–Ω—Ç—Ä", lat: 52.4345, lng: 30.9754, region: "–ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å" },
            { name: "–í–∏—Ç–µ–±—Å–∫, –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å", lat: 55.1904, lng: 30.2049, region: "–í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å" },
            { name: "–ì–æ–º–µ–ª—å, –ü–∞—Ä–∫ –õ—É–Ω–∞—á–∞—Ä—Å–∫–æ–≥–æ", lat: 52.4345, lng: 30.9754, region: "–ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å" }
        ];
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function loadStats() {
    const bestScore = localStorage.getItem('belarus-guessor-best-score') || 0;
    const gamesPlayed = localStorage.getItem('belarus-guessor-games-played') || 0;
    
    document.getElementById('best-score').textContent = bestScore;
    document.getElementById('games-played').textContent = gamesPlayed;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function saveStats() {
    const currentBest = parseInt(localStorage.getItem('belarus-guessor-best-score')) || 0;
    const gamesPlayed = parseInt(localStorage.getItem('belarus-guessor-games-played')) || 0;
    
    if (gameState.score > currentBest) {
        localStorage.setItem('belarus-guessor-best-score', gameState.score);
    }
    
    localStorage.setItem('belarus-guessor-games-played', gamesPlayed + 1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
function initializeYandexMaps() {
    if (typeof ymaps !== 'undefined') {
        ymaps.ready(function() {
            console.log('–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤—ã');
        });
    } else {
        console.error('–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.');
    }
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active');
}

function showMainMenu() {
    showScreen('main-menu');
    loadStats();
    cleanupGame();
}

function showMultiplayer() {
    showScreen('multiplayer-menu');
    initializeMultiplayer();
}

// –ù–∞—á–∞–ª–æ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã
function startSoloGame() {
    resetGameState();
    showScreen('game-screen');
    loadNewRound();
}

// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
function resetGameState() {
    gameState = {
        currentRound: 1,
        totalRounds: 5,
        score: 0,
        roundResults: [],
        currentLocation: null,
        usedLocations: [],
        guessMarker: null,
        correctMarker: null,
        gameMap: null,
        panoramaPlayer: null
    };
    
    updateGameUI();
    updateRoundProgress();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä—ã
function updateGameUI() {
    document.getElementById('current-round').textContent = gameState.currentRound;
    document.getElementById('current-score').textContent = gameState.score.toLocaleString();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞—É–Ω–¥–æ–≤
function updateRoundProgress() {
    document.querySelectorAll('.round-dot').forEach((dot, index) => {
        const roundNum = index + 1;
        dot.classList.remove('active', 'completed');
        
        if (roundNum < gameState.currentRound) {
            dot.classList.add('completed');
        } else if (roundNum === gameState.currentRound) {
            dot.classList.add('active');
        }
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
async function loadNewRound() {
    showLoader('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞...');
    
    try {
        // –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
        const availableLocations = gameCoords.filter(loc => 
            !gameState.usedLocations.some(used => used.lat === loc.lat && used.lng === loc.lng)
        );
        
        if (availableLocations.length === 0) {
            throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π');
        }
        
        const randomLocation = availableLocations[Math.floor(Math.random() * availableLocations.length)];
        gameState.currentLocation = randomLocation;
        gameState.usedLocations.push(randomLocation);
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–Ω–æ—Ä–∞–º—ã
        await loadPanorama(randomLocation);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
        initializeGuessMap();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        updateLocationHint();
        
        hideLoader();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—É–Ω–¥–∞:', error);
        hideLoader();
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—É–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–Ω–æ—Ä–∞–º—ã
async function loadPanorama(location) {
    return new Promise((resolve, reject) => {
        if (typeof ymaps === 'undefined') {
            reject(new Error('–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'));
            return;
        }
        
        ymaps.panorama.locate([location.lat, location.lng]).then(
            function(panoramas) {
                if (panoramas.length > 0) {
                    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–∞–Ω–æ—Ä–∞–º—ã
                    if (gameState.panoramaPlayer) {
                        gameState.panoramaPlayer.destroy();
                    }
                    
                    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–Ω–æ—Ä–∞–º—ã
                    gameState.panoramaPlayer = new ymaps.panorama.Player(
                        'panorama',
                        panoramas[0],
                        {
                            direction: [Math.random() * 360, -10 + Math.random() * 20],
                            span: [90, 90],
                            controls: []
                        }
                    );
                    
                    resolve();
                } else {
                    reject(new Error('–ü–∞–Ω–æ—Ä–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
                }
            },
            function(error) {
                reject(error);
            }
        );
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
function initializeGuessMap() {
    if (typeof ymaps === 'undefined') return;
    
    if (gameState.gameMap) {
        gameState.gameMap.destroy();
    }
    
    gameState.gameMap = new ymaps.Map('guess-map', {
        center: [53.9, 27.5], // –¶–µ–Ω—Ç—Ä –ë–µ–ª–∞—Ä—É—Å–∏
        zoom: 7,
        controls: ['zoomControl', 'typeSelector']
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
    gameState.gameMap.events.add('click', function(e) {
        const coords = e.get('coords');
        placeGuessMarker(coords);
    });
    
    // –°–±—Ä–æ—Å –º–∞—Ä–∫–µ—Ä–æ–≤
    gameState.guessMarker = null;
    gameState.correctMarker = null;
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
    document.getElementById('make-guess-btn').disabled = true;
    document.getElementById('mobile-guess-btn').disabled = true;
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –≤—ã–±–æ—Ä–∞
function placeGuessMarker(coords) {
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
    if (gameState.guessMarker) {
        gameState.gameMap.geoObjects.remove(gameState.guessMarker);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
    gameState.guessMarker = new ymaps.Placemark(coords, {
        hintContent: '–í–∞—à –≤—ã–±–æ—Ä'
    }, {
        preset: 'islands#redDotIcon',
        draggable: false
    });
    
    gameState.gameMap.geoObjects.add(gameState.guessMarker);
    
    // –í–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
    document.getElementById('make-guess-btn').disabled = false;
    document.getElementById('mobile-guess-btn').disabled = false;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ –ª–æ–∫–∞—Ü–∏–∏
function updateLocationHint() {
    const hints = [
        'üáßüáæ –ì–¥–µ —ç—Ç–æ –≤ –ë–µ–ª–∞—Ä—É—Å–∏?',
        'üèõÔ∏è –ù–∞–π–¥–∏—Ç–µ —ç—Ç–æ –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ',
        'üó∫Ô∏è –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä',
        'üìç –£–∫–∞–∂–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é',
        'üéØ –ü–æ–∫–∞–∂–∏—Ç–µ, –≥–¥–µ —ç—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è'
    ];
    
    const randomHint = hints[Math.floor(Math.random() * hints.length)];
    document.getElementById('location-hint').textContent = randomHint;
}

// –°–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä
function makeGuess() {
    if (!gameState.guessMarker) return;
    
    const guessCoords = gameState.guessMarker.geometry.getCoordinates();
    const actualCoords = [gameState.currentLocation.lat, gameState.currentLocation.lng];
    
    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    const distance = calculateDistance(guessCoords, actualCoords);
    
    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
    const points = calculatePoints(distance);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—É–Ω–¥–∞
    const roundResult = {
        round: gameState.currentRound,
        location: gameState.currentLocation,
        guessCoords: guessCoords,
        actualCoords: actualCoords,
        distance: distance,
        points: points
    };
    
    gameState.roundResults.push(roundResult);
    gameState.score += points;
    
    // –ü–æ–∫–∞–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
    showCorrectLocation(actualCoords);
    
    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—É–Ω–¥–∞
    showRoundResult(roundResult);
    
    updateGameUI();
}

// –ü–æ–∫–∞–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
function showCorrectLocation(coords) {
    gameState.correctMarker = new ymaps.Placemark(coords, {
        hintContent: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ'
    }, {
        preset: 'islands#greenDotIcon',
        draggable: false
    });
    
    gameState.gameMap.geoObjects.add(gameState.correctMarker);
    
    // –ü–æ–∫–∞–∑ –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É –≤—ã–±–æ—Ä–æ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–µ—Å—Ç–æ–º
    if (gameState.guessMarker) {
        const line = new ymaps.Polyline([
            gameState.guessMarker.geometry.getCoordinates(),
            coords
        ], {}, {
            strokeColor: '#FF0000',
            strokeWidth: 3,
            strokeOpacity: 0.8
        });
        
        gameState.gameMap.geoObjects.add(line);
    }
    
    // –ü–æ–¥–≥–æ–Ω–∫–∞ –º–∞—Å—à—Ç–∞–±–∞ –∫–∞—Ä—Ç—ã
    gameState.gameMap.setBounds(gameState.gameMap.geoObjects.getBounds(), {
        checkZoomRange: true,
        zoomMargin: 50
    });
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ (–≤ –∫–º)
function calculateDistance(coords1, coords2) {
    const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    const dLat = (coords2[0] - coords1[0]) * Math.PI / 180;
    const dLon = (coords2[1] - coords1[1]) * Math.PI / 180;
    const a = 
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(coords1[0] * Math.PI / 180) * Math.cos(coords2[0] * Math.PI / 180) * 
        Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
function calculatePoints(distance) {
    const maxPoints = 5000;
    const maxDistance = 500; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–∫–æ–≤
    
    if (distance >= maxDistance) return 0;
    
    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—á–∫–æ–≤
    const points = Math.round(maxPoints * Math.exp(-distance / 100));
    return Math.max(0, points);
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—É–Ω–¥–∞
function showRoundResult(result) {
    document.getElementById('result-distance').textContent = `${Math.round(result.distance)} –∫–º`;
    document.getElementById('result-points').textContent = result.points.toLocaleString();
    document.getElementById('result-total').textContent = gameState.score.toLocaleString();
    document.getElementById('correct-location').textContent = `${result.location.name}, ${result.location.region}`;
    
    // –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let emoji = 'üéØ';
    if (result.distance < 1) emoji = 'üéØ';
    else if (result.distance < 25) emoji = 'üî•';
    else if (result.distance < 100) emoji = 'üëç';
    else if (result.distance < 250) emoji = 'üëå';
    else emoji = 'üé≤';
    
    document.getElementById('result-emoji').textContent = emoji;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    const nextBtn = document.getElementById('next-round-btn');
    if (gameState.currentRound >= gameState.totalRounds) {
        nextBtn.textContent = 'üèÜ –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–∏';
        nextBtn.onclick = showFinalResults;
    } else {
        nextBtn.textContent = '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥';
        nextBtn.onclick = nextRound;
    }
    
    // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.getElementById('round-result-modal').style.display = 'flex';
}

// –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
function nextRound() {
    document.getElementById('round-result-modal').style.display = 'none';
    
    if (gameState.currentRound >= gameState.totalRounds) {
        showFinalResults();
        return;
    }
    
    gameState.currentRound++;
    updateGameUI();
    updateRoundProgress();
    loadNewRound();
}

// –ü—Ä–æ–ø—É—Å–∫ —Ä–∞—É–Ω–¥–∞
function skipRound() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥?')) return;
    
    const roundResult = {
        round: gameState.currentRound,
        location: gameState.currentLocation,
        guessCoords: null,
        actualCoords: [gameState.currentLocation.lat, gameState.currentLocation.lng],
        distance: 1000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        points: 0
    };
    
    gameState.roundResults.push(roundResult);
    showRoundResult(roundResult);
}

// –ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showFinalResults() {
    document.getElementById('round-result-modal').style.display = 'none';
    
    const finalScore = gameState.score;
    document.getElementById('final-score-value').textContent = finalScore.toLocaleString();
    
    // –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—á—ë—Ç–∞
    let emoji = 'üéâ';
    if (finalScore >= 20000) emoji = 'üèÜ';
    else if (finalScore >= 15000) emoji = 'ü•á';
    else if (finalScore >= 10000) emoji = 'ü•à';
    else if (finalScore >= 5000) emoji = 'ü•â';
    
    document.getElementById('final-emoji').textContent = emoji;
    
    // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ä–∞—É–Ω–¥–∞–º
    const breakdown = document.getElementById('rounds-breakdown');
    breakdown.innerHTML = '';
    
    gameState.roundResults.forEach((result, index) => {
        const roundItem = document.createElement('div');
        roundItem.className = 'round-item';
        roundItem.innerHTML = `
            <span>–†–∞—É–Ω–¥ ${index + 1}: ${result.location.name}</span>
            <span>${result.points.toLocaleString()} –æ—á–∫–æ–≤</span>
        `;
        breakdown.appendChild(roundItem);
    });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    saveStats();
    
    // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.getElementById('final-result-modal').style.display = 'flex';
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
function showResultsOnMap() {
    document.getElementById('round-result-modal').style.display = 'none';
    // –ö–∞—Ä—Ç–∞ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
function shareResults() {
    const text = `üáßüáæ BelarusGuessor PRO üáßüáæ\n\n–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${gameState.score.toLocaleString()} –æ—á–∫–æ–≤!\n–†–∞—É–Ω–¥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: ${gameState.roundResults.length}/${gameState.totalRounds}\n\n–ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É]`;
    
    if (navigator.share) {
        navigator.share({
            title: 'BelarusGuessor PRO - –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
            text: text
        });
    } else {
        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        navigator.clipboard.writeText(text).then(() => {
            alert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        });
    }
}

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–≥—Ä—ã
function cleanupGame() {
    if (gameState.panoramaPlayer) {
        gameState.panoramaPlayer.destroy();
        gameState.panoramaPlayer = null;
    }
    
    if (gameState.gameMap) {
        gameState.gameMap.destroy();
        gameState.gameMap = null;
    }
}

// –õ–æ–∞–¥–µ—Ä
function showLoader(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    const loader = document.getElementById('loader');
    loader.querySelector('p').textContent = message;
    loader.classList.remove('hidden');
}

function hideLoader() {
    document.getElementById('loader').classList.add('hidden');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('modal')) {
        e.target.style.display = 'none';
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.querySelectorAll('.modal').forEach(modal => {
            modal.style.display = 'none';
        });
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–ª—É—à–∫–∏)
function showSettings() {
    alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!');
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function() {
    cleanupGame();
});